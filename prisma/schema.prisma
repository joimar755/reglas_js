// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                   Int                     @id @default(autoincrement())
  nombre               String                  @unique
  email                String                  @unique
  password             String
  Role_Id              Int
  role                 Role                    @relation(fields: [Role_Id], references: [id])
  diagnosticosPaciente Diagnostico_Pacientes[] @relation("PacienteDiagnosticos")
  diagnosticosMedico   Diagnostico_Pacientes[] @relation("MedicoDiagnosticos")
  createdAt            DateTime                @default(now())
  Historial            Historial[]
}

model Role {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique // medico , paciente 
  createdAt DateTime  @default(now())
  Usuario   Usuario[]
}

model Rules {
  id          Int          @id @default(autoincrement())
  nombre      String
  condicion   Condicion[]
  eventoRegla EventRegla[]
}

model facts {
  id        Int         @id @default(autoincrement())
  nombre    String
  Condicion Condicion[]
}

model Condicion {
  id       Int     @id @default(autoincrement())
  factId   Int
  operator String
  value    Boolean
  fact     facts   @relation(fields: [factId], references: [id])
  reglaId  Int
  regla    Rules   @relation(fields: [reglaId], references: [id])

  @@unique([reglaId, factId])
}

model Sintomas_relacionados {
  id         Int          @id @default(autoincrement())
  nombre     String       @unique
  EventRegla EventRegla[]
}

model posibles_complicaciones {
  id         Int          @id @default(autoincrement())
  nombre     String       @unique
  EventRegla EventRegla[]
}

model Recomendaciones {
  id         Int          @id @default(autoincrement())
  nombre     String       @unique
  EventRegla EventRegla[]
}

model EventRegla {
  id                Int                     @id @default(autoincrement())
  type              String
  diagnostico       String
  descripcion       String
  reglaId           Int                     @unique
  regla             Rules                   @relation(fields: [reglaId], references: [id])
  Sintomas_ID       Int
  Sintomas          Sintomas_relacionados   @relation(fields: [Sintomas_ID], references: [id])
  Complicaciones_ID Int
  Complicaicones    posibles_complicaciones @relation(fields: [Complicaciones_ID], references: [id])
  Recomendacion_ID  Int
  Recomendacion     Recomendaciones         @relation(fields: [Recomendacion_ID], references: [id])
  pacientes         Diagnostico_Pacientes[]
}

model Diagnostico_Pacientes {
  id           Int        @id @default(autoincrement())
  PacienteId   Int
  Medico_Id    Int
  paciente     Usuario    @relation("PacienteDiagnosticos", fields: [PacienteId], references: [id])
  medico       Usuario    @relation("MedicoDiagnosticos", fields: [Medico_Id], references: [id])
  eventReglaId Int
  eventRegla   EventRegla @relation(fields: [eventReglaId], references: [id])
  createdAt    DateTime   @default(now())
}

model Historial {
  id            Int          @id @default(autoincrement())
  pacienteId    Int
  paciente      Usuario      @relation(fields: [pacienteId], references: [id])
  texto         String
  resumen       Resumen?     @relation(fields: [resumenId], references: [id])
  resumenId     Int?
  sentimiento   Sentimiento? @relation(fields: [sentimientoId], references: [id])
  sentimientoId Int?
  traducciones  Traduccion[]
  entidades     Entidad[]
  createdAt     DateTime     @default(now())
}

model Resumen {
  id        Int         @id @default(autoincrement())
  texto     String
  historial Historial[]
  createdAt DateTime    @default(now())
}

model Entidad {
  id          Int       @id @default(autoincrement())
  tipo        String // ej: s√≠ntoma, pregunta, estado
  valor       String
  historialId Int
  historial   Historial @relation(fields: [historialId], references: [id])
}

model Traduccion {
  id          Int       @id @default(autoincrement())
  idioma      String
  texto       String
  historialId Int
  historial   Historial @relation(fields: [historialId], references: [id])
}

model Sentimiento {
  id        Int         @id @default(autoincrement())
  score     Float
  categoria String // positivo, negativo, neutro, grave
  historial Historial[]
  createdAt DateTime    @default(now())
}
